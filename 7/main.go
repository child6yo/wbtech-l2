package main

import (
	"fmt"
	"math/rand"
	"time"
)

// asChan принимает произвольный набор чисел, возвращает канал для чтения, в который пишет числа
// с промежутком в случайное количество миллисекунд
func asChan(vs ...int) <-chan int {
	// создает канал
	c := make(chan int)
	// в отдельной горутине начинает в него писать
	go func() {
		// в цикле пишем значения в канал
		for _, v := range vs {
			c <- v
			// ждем
			time.Sleep(time.Duration(rand.Intn(1000)) * time.Millisecond)
		}
		// закрываем канал как только все записали
		close(c)
	}()
	// сходу возвращает канал, чтобы с него уже можно было начинать чтение
	return c
}

// merge читает сразу из двух каналов, возвращает канал для чтения, 
// в который пишет значения из объединения двух каналов
func merge(a, b <-chan int) <-chan int {
	// создает канал
	c := make(chan int)
	// отдельная горутина
	go func() {
		// цикл с select
		for {
			// select позволяет исполнить блок, в который пришло значение из указанного канала
			// исполнение - в случайном порядке
			select {
			// чтение из a 
			case v, ok := <-a:
				if ok {
					c <- v
				} else {
					a = nil
				}
			// чтение из b
			case v, ok := <-b:
				if ok {
					c <- v
				} else {
					b = nil
				}
			}
			// если переданы два пустых канала - сразу закрывает выходной канал и выходим
			if a == nil && b == nil {
				close(c)
				return
			}
		}
	}()
	// сходу возвращает канал, чтобы с него уже можно было начинать чтение
	return c
}

func main() {
	rand.Seed(time.Now().Unix())
	a := asChan(1, 3, 5, 7)
	b := asChan(2, 4, 6, 8)
	c := merge(a, b)
	for v := range c {
		fmt.Print(v)
	}
}
